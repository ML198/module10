getwd()
install.packages(c("tidyverse", "here", "broom", "qvalue"))
rm(list = ls())
gc()
R.version.string
curl -o cervix_ectocervix_pvalue_results.csv https://raw.githubusercontent.com/ML198/Gtex-gene-expression-analysis/main/data/p_value/cervix_ectocervix_pvalue_results.csv
file_github <- read.csv("/Users/mingruili/Downloads/cervix_ectocervix_pvalue_results.csv")
file_local <- read.csv("/Users/mingruili/Library/CloudStorage/OneDrive-Emory/shiny/data/p_value/cervix_ectocervix_pvalue_results.csv")
# Compare if they are identical
identical(file_github, file_local)
# Function to calculate expected length for MSS-based CI
mss_expected_length <- function(n, sigma) {
# Chi-squared critical values for 95% CI
chi2_025 <- qchisq(0.025, df = n)
chi2_975 <- qchisq(0.975, df = n)
# Expected length based on MSS
length_mss <- (n * sigma^2) * (1 / chi2_025 - 1 / chi2_975)
return(length_mss)
}
# Function to calculate expected length for insufficient statistic-based CI
insufficient_stat_expected_length <- function(n, sigma) {
# Z critical value for 95% CI (normal distribution)
z_025 <- qnorm(0.025)
z_975 <- qnorm(0.975)
# Expected length based on insufficient statistic
length_insufficient <- (sigma * (z_975 - z_025)) / sqrt(n)
return(length_insufficient)
}
# Set sigma (standard deviation)
sigma <- 1  # You can change this based on your example
# Sample sizes
n_values <- c(1, 5, 10, 20, 50)
# Calculate expected lengths for both CI methods
lengths_mss <- sapply(n_values, function(n) mss_expected_length(n, sigma))
lengths_insufficient <- sapply(n_values, function(n) insufficient_stat_expected_length(n, sigma))
# Combine results into a data frame for better visualization
result_table <- data.frame(
n = n_values,
"CI based on MSS" = lengths_mss,
"CI based on insufficient statistic" = lengths_insufficient
)
# Print the result table
print(result_table)
# Chi-squared critical values for 95% CI
chi2_025 <- qchisq(0.025, df = n)
chi2_975 <- qchisq(0.975, df = n)
qchisq(0.025, df = 1)
qchisq(0.975, df = 1)
1 / chi2_025 - 1 / chi2_975
chi2_025 <- qchisq(0.025, df = 1)
chi2_975 <- qchisq(0.975, df = 1)
# Expected length based on MSS
length_mss <- (n * sigma^2) * (1 / chi2_025 - 1 / chi2_975)
length_mss
mean(17, 6, 18, 14, 7, 8, 11, 9, 15)
sd(17, 6, 18, 14, 7, 8, 11, 9, 15)
sd("17, 6, 18, 14, 7, 8, 11, 9, 15")
sd(c(17, 6, 18, 14, 7, 8, 11, 9, 15))
mean(c(17, 6, 18, 14, 7, 8, 11, 9, 15))
mean(c(9, 6, 10, 4, 7, 3, 8))
sd(c(9, 6, 10, 4, 7, 3, 8))
n(c(9, 6, 10, 4, 7, 3, 8))
length(c(9, 6, 10, 4, 7, 3, 8))
# Function to calculate expected length for MSS-based CI
mss_expected_length <- function(n, sigma) {
# Chi-squared critical values for 95% CI
chi2_025 <- qchisq(0.025, df = n)
chi2_975 <- qchisq(0.975, df = n)
# Expected length based on MSS
length_mss <- (1 / chi2_025 - 1 / chi2_975)
return(length_mss)
}
# Z critical value for 95% CI (normal distribution)
z_025 <- qnorm(0.025)
z_025
z_975 <- qnorm(0.975)
z_975
# Z critical value for 95% CI (normal distribution)
chi2_025 <- qchisq(0.025, df = 1)
chi2_975 <- qchisq(0.975, df = 1)
chi2_025
# Function to calculate expected length for MSS-based CI
mss_expected_length <- function(n, sigma) {
# Chi-squared critical values for 95% CI
chi2_025 <- qchisq(0.025, df = n)
chi2_975 <- qchisq(0.975, df = n)
# Expected length based on MSS
length_mss <- (1 / chi2_025 - 1 / chi2_975)
return(length_mss)
}
# Function to calculate expected length for insufficient statistic-based CI
insufficient_stat_expected_length <- function(n, sigma) {
# Z critical value for 95% CI (normal distribution)
chi2_025 <- qchisq(0.025, df = 1)
chi2_975 <- qchisq(0.975, df = 1)
# Expected length based on insufficient statistic
length_insufficient <- (1/chi2_025 - 1/chi2_975)
return(length_insufficient)
}
# Set sigma (standard deviation)
sigma <- 1  # You can change this based on your example
# Sample sizes
n_values <- c(1, 5, 10, 20, 50)
# Calculate expected lengths for both CI methods
lengths_mss <- sapply(n_values, function(n) mss_expected_length(n, sigma))
lengths_insufficient <- sapply(n_values, function(n) insufficient_stat_expected_length(n, sigma))
# Combine results into a data frame for better visualization
result_table <- data.frame(
n = n_values,
"CI based on MSS" = lengths_mss,
"CI based on insufficient statistic" = lengths_insufficient
)
# Print the result table
print(result_table)
renv" %in% row.names(installed.packages())`
""
renv" %in% row.names(installed.packages())
''
"renv" %in% row.names(installed.packages())`""
"renv" %in% row.names(installed.packages())
getwd
getwd
getwd()
setwd("Documents/DATA 550/module10/")
getwd()
renv::restore()
renv::restore()
here::i_am(
"code/01_make_output.R"
)
set.seed(1)
random_numbers1 <- rnorm(100)
saveRDS(
random_numbers1,
file = here::here("output", "random_numbers1.rds")
)
set.seed(2)
random_numbers2 <- rgamma(100, shape = 1)
saveRDS(
random_numbers2,
file = here::here("output", "random_numbers2.rds")
)
set.seed(3)
random_numbers3 <- runif(100)
saveRDS(
random_numbers3,
file = here::here("output", "random_numbers3.rds")
)
renv::restore()
install.packages("here")
install.packages("here")
renv::restore()
